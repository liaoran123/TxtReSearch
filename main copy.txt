// 大藏经定制版考据级搜索引擎
package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"time"

	"txtresearch/pubgo"
	"txtresearch/web"
)

// 读取配置文件装入map
func readconfig() {
	path := pubgo.GetCurrentAbPath()
	text, _ := os.ReadFile(path + "/web/config.json")
	web.ConfigMap = make(map[string]interface{})
	json.Unmarshal(text, &web.ConfigMap)
}

// 初始化全局数据、变量
func ini() {
	web.Ini()
	//web.GetDirs()                //加载全部目录
	web.LoadDirs()
	pubgo.Tj = pubgo.Newtongji() //统计
}

// 添加路由
func addrouters() {
	/*
		//routers包为api，暂时不开放
				http.HandleFunc("/admin/", routers.AdminHtml)
				http.HandleFunc("/admin/cata/", routers.Catahtml)
				http.HandleFunc("/admin/search/", routers.Searchhtml)
				http.HandleFunc("/admin/art/", routers.Arthtml)


			http.HandleFunc("/api/cata/", routers.Cata) //目录，get,post,put,delete
			http.HandleFunc("/api/art/", routers.Art)   //文章，get,post,put,delete

			http.HandleFunc("/api/search/", routers.Search) //http.HandleFunc("/api/search/", routers.Search) //搜索

			http.HandleFunc("/api/art/item/", routers.Artitem) //获取目录下的文章列表
			http.HandleFunc("/api/art/meta/", routers.Meta)    //获取文章摘录
			http.HandleFunc("/api/Idxpfx/", routers.Idxpfx)    //搜索词为前缀的相关词

			http.HandleFunc("/test", routers.Test)
	*/
	http.HandleFunc("/static/", web.Static) //静态文件服务器
	http.HandleFunc("/", web.Index)         //首页
	//不使用微服务模式，是为了方便打包，简化其他人搭建使用
	http.HandleFunc("/createfullidx/", web.Createfullidx) //创建数据
	//http.HandleFunc("/skqs/", web.ViewFolders)            //浏览文件夹
	http.HandleFunc("/s/", web.Search)
	http.HandleFunc("/art/", web.Art)
	http.HandleFunc("/dir/", web.Dir)
	http.HandleFunc("/getonejuzi/", web.Getonejuzi) //获取文章摘录
	http.HandleFunc("/shuoming/", web.Shuoming)     //搜索词为前缀的相关词
	http.HandleFunc("/ft/", web.Ft)                 //设置繁简体
	http.HandleFunc("/tongji/", web.Tongji)         //统计

}

// 运行服务
func run() {
	fmt.Println(time.Now())
	fmt.Println("四库全书txtReSearch服务器程序启动成功!")
	fmt.Println("----------------------------")
	port := web.ConfigMap["port"].(string) //从配置文件获取port
	fmt.Println("请在浏览器打开下面的地址即可使用")
	fmt.Println("http://127.0.0.1:" + port)
	fmt.Println("----------------------------")
	//Openurl("http://127.0.0.1:" + port) //打开网址，用于用户本地搭建使用
	err := http.ListenAndServe(":"+port, nil)
	//log.Fatal(err)
	if err != nil {
		fmt.Println("请更正错误后重启程序：", err)
	}
}
func main() {
	readconfig()
	ini()
	addrouters()
	/*创建索引数据，第一次运行时使用
	//createidx.CreatIdx(web.Table)
	//web.Getmate() //测试代码
	*/
	run()
}
