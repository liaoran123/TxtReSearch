package web

import (
	"fmt"
	"strings"
	"txtresearch/pubgo"
	"txtresearch/xbdb"
)

var Table map[string]*xbdb.Table
var xb *xbdb.Xb

//var loop int

func Ini() {
	cdir = pubgo.GetCurrentAbPath()
	//打开或创建数据库
	dbpath := ConfigMap["dbpath"].(string)
	if dbpath == "" {
		dbpath = cdir
	}
	xb = xbdb.NewDb(dbpath + "\\db")

	//建表
	dbinfo := xbdb.NewTableInfoNil(xb.Db)
	//dbinfo.Del("zl")
	//dbinfo.Del("art")
	//dbinfo.Del("c")

	if dbinfo.GetInfo("c").FieldType == nil {
		createc(dbinfo)
	}
	if dbinfo.GetInfo("meta").FieldType == nil {
		createmeta(dbinfo)
	}
	if dbinfo.GetInfo("kws").FieldType == nil {
		createkws(dbinfo)
	}
	//打开表操作结构

	/*
		fmt.Println("开始", time.Now())
		copytb()
		fmt.Println("结束", time.Now())
	*/
	Table = xb.GetTables()

	//Table["kws"].Select.ForTb(Pr)

	//Table["ca"].Select.FindPrefixFun([]byte("ca."), false, Pr) //ca.fid-\x00\x00\x00\x01-
	/*
		for i := 10; i < 49; i++ {
			id := strconv.Itoa(i)
			xbdb.Tables["record"].Del(id)
		}*/

	arttjs = Newtjs(21)
	searchtjs = Newtjs(11)
	cips = Newtjs(108)
	GetTopDir()
}
func Pr(k, v []byte) bool {
	ks, kv := string(k), string(v)
	if strings.Contains(ks, "太玄经") {
		fmt.Println(ks, kv)
	}
	//fmt.Println(ks, kv)
	return true
}

// 创建文章内容表，该表是全文搜索，故而名称尽量短，可以减少文件大小。
// 带全文搜索索引的内容表c
func createc(tbifo *xbdb.TableInfo) {
	name := "c"                                         //目录表，
	fields := []string{"id", "s", "r"}                  //字段 s 是文章的分段内容，r，是s的反转字符串，用于前置匹配词,pos,为位置
	fieldType := []string{"string", "string", "string"} //字段
	idxs := []string{}                                  //索引字段,fields的下标对应的字段。支持组合查询，字段之间用,分隔
	fullText := []string{"1", "2"}                      //考据级全文搜索索引字段的下标。
	ftlen := "7"                                        //全文搜索的长度，中文默认是7
	patterns := []string{"1", "5"}                      //搜索词模型。 1,中文;2字母;3，数字；4，标点符号；5，自定义。不符合的字被过滤。可以组合。
	diychar := "《》"
	r := tbifo.Create(name, ftlen, diychar, fields, fieldType, idxs, fullText, patterns)
	fmt.Printf("r: %v\n", r)
}

func createmeta(tbifo *xbdb.TableInfo) {
	name := "meta"                                   //目录表，
	fields := []string{"id", "ckey", "title"}        //字段 s 是文章的分段内容，r，是s的反转字符串，用于前置匹配词,pos,为位置
	fieldType := []string{"int", "string", "string"} //字段
	idxs := []string{}                               //索引字段,fields的下标对应的字段。支持组合查询，字段之间用,分隔
	fullText := []string{}                           //考据级全文搜索索引字段的下标。
	ftlen := "7"                                     //全文搜索的长度，中文默认是7
	patterns := []string{}                           //搜索词模型。 1,中文;2字母;3，数字；4，标点符号；5，自定义。不符合的字被过滤。可以组合。
	diychar := ""
	r := tbifo.Create(name, ftlen, diychar, fields, fieldType, idxs, fullText, patterns)
	fmt.Printf("r: %v\n", r)
}
func createkws(tbifo *xbdb.TableInfo) {
	name := "kws"                                 //目录表，
	fields := []string{"id", "key", "count"}      //字段 s 是文章的分段内容，r，是s的反转字符串，用于前置匹配词,pos,为位置
	fieldType := []string{"int", "string", "int"} //字段
	idxs := []string{"1"}                         //索引字段,fields的下标对应的字段。支持组合查询，字段之间用,分隔
	fullText := []string{}                        //考据级全文搜索索引字段的下标。
	ftlen := "7"                                  //全文搜索的长度，中文默认是7
	patterns := []string{}                        //搜索词模型。 1,中文;2字母;3，数字；4，标点符号；5，自定义。不符合的字被过滤。可以组合。
	diychar := ""
	r := tbifo.Create(name, ftlen, diychar, fields, fieldType, idxs, fullText, patterns)
	fmt.Printf("r: %v\n", r)
}

/*
// 寻找文章中摘录，为了seo
var nlen int
var ks, vs string
var title string
var zlfld map[string]string

func Getmate() {
	nlen = 2
	zlfld = make(map[string]string)
	fmt.Printf("time.Now(): %v\n", time.Now())
	Table["c"].Select.ForRDFun(true, sec)
	fmt.Printf("time.Now(): %v\n", time.Now())
}
func sec(k, v []byte) bool {
	title = ""
	ks, vs = string(k), string(v)
	vs = strings.Trim(vs, "_")
	//fmt.Println(ks, vs)
	if vs == "\n" {
		nlen++
		return true
	} else {
		if nlen >= 2 { //出现连续2个以上回车符
			if len(vs) < 49*3 { //以当前句子为标题
				title = vs
			} else { //如果当前句太长，则截取
				ss := pubgo.GetCnS(vs)
				for _, sv := range ss {
					if strings.Trim(sv, " ") == "" {
						continue
					} else {
						title += sv + " "
						if len(title) >= 6 { //至少2个字
							break
						}
					}
				}
			}
			if len(title) < 49*3 { //标题49字内符合要求
				title = strings.Trim(title, "\u3000")
				title = strings.Trim(title, " ")
				title = strings.Trim(title, "。")
				zlfld["title"] = title
				zlfld["ckey"] = ks
				zlfld["id"] = ""
				if !Table["meta"].Ins(zlfld).Succ {
					println("添加错误")
				}
				zlfld["title"] = ""
				zlfld["ckey"] = ""
			}
			nlen = 0
		}
		nlen = 0
	}
	return true
}
*/
